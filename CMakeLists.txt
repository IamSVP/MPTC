# Project CMake file

CMAKE_MINIMUM_REQUIRED(VERSION 3.2  FATAL_ERROR)
PROJECT(MPTC CXX C ) 

SET(MPTC_MAJOR_VERSION 0)
SET(MPTC_MINOR_VERSION 0)
SET(MPTC_PATCH_VERSION 0)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON) 

OPTION(TREAT_WARNINGS_AS_ERRORS "Treat compiler warnings as errors. We use the highest warnings levels for compilers." OFF)


IF(MSVC)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
ELSEIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fms-extensions")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")        ## Optimize
  SET(CMAKE_C_FLASGS "${CMAKE_C_FLAGS} -Wall -fms-extensions")
ENDIF(MSVC)


IF(TREAT_WARNINGS_AS_ERRORS)
  IF(MSVC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /WX")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX")
  ELSEIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Werror")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror")
  ENDIF(MSVC)
ENDIF(TREAT_WARNINGS_AS_ERRORS)


SET(CMAKE_CXX_STANDARD 11)

#add google-test later when project becomes big 

ADD_SUBDIRECTORY(googletest)
ENABLE_TESTING()

ADD_SUBDIRECTORY(Include)
ADD_SUBDIRECTORY(entropy)

ADD_SUBDIRECTORY(codec)



